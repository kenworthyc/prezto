#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

echo "Logged in as $USER on $(hostname)"

# nvm
export NVM_DIR="$HOME/.nvm"

[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Path changes are made non-destructive with PATH=new_path;$PATH   This is like A=A+B so we preserve the old path

# Path order matters, putting /usr/local/bin before /usr/bin
# ensures brew programs will be seen and used before another program
# of the same name is called
#
# Path for RBENV
test -d "$HOME/.rbenv/" && PATH="$HOME/.rbenv/bin:$PATH"

# Path for brew
test -d /usr/local/bin && export PATH="/usr/local/bin:/usr/local/sbin:~/bin:$PATH"
# Path for Heroku
test -d /usr/local/heroku/ && export PATH="/usr/local/heroku/bin:$PATH"

export YVM_DIR=/usr/local/opt/yvm
[ -r $YVM_DIR/yvm.sh ] && . $YVM_DIR/yvm.sh

export PATH="$HOME/.npm-packages/bin:$PATH"
export PATH="$PATH:`yarn global bin`"

export PATH="/usr/local/opt/postgresql@9.4/bin:$PATH"
export PGDATA="$HOME/Code/PostgreSQL/data/"

# autocompletes
compctl -g '~/.itermocil/*(:t:r)' itermocil
# Rbenv autocomplete and shims
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi


# Use updated Vim (via MacVim (instead of preinstalled Vim 7.3))
alias vim="/Applications/MacVim.app/Contents/MacOS/Vim"

# Set Vim as the default editor
export EDITOR="vim"

# Temp aliases for projects
alias mh="cd ~/Code/mealhand && nvm use"

# Useful aliases
alias ll="ls -Glah"

alias be="bundle exec"

alias migrate="bundle; be rake db:migrate RAILS_ENV=development; be rake db:migrate RAILS_ENV=test; git checkout -- db/schema.rb"

# delete any branches merged to master or develop
alias gbclean="git branch --merged | egrep -v '(^\*|master|develop)' | xargs git branch -d"

alias pg="postgres -D /usr/local/pgsql/data >logfile 2>&1 &"

# resolve conflicts with fix
alias fix='git diff --name-only | uniq | xargs subl'

alias shup="source ~/.zshrc"
alias zshrc="vim ~/.zshrc"
alias vimrc="vim ~/.vimrc"

stage() {
  targetdir="$HOME/Code/mealhand"
  if [ "$(pwd)" != $targetdir ]; then
    cd $targetdir;
  fi

  normal=`echo "\033[m"`
  blue=`echo "\033[36m"`
  yellow=`echo "\033[33m"`
  bgred=`echo "\033[41m"`
  fgred=`echo "\033[31m"`

  safe_envs=("demo" "dev" "dev2" "staging")
  branch="$(git symbolic-ref --short HEAD)"

  if [ ${safe_envs[(ie)$1]} -le ${#safe_envs} ]
  then
    echo "Stage branch ${yellow}$branch${normal} in ${blue}$1${normal}, y/n?"
    arg_given="true"
  else
    arg_given="false"
  fi

  if [ $arg_given = "false" ]
  then
    echo "Choose an env to deploy ${yellow}$branch${normal} to."

    printf "\n************************************\n"
    printf "${blue}**${yellow} 1)${blue} demo${normal}\n"
    printf "${blue}**${yellow} 2)${blue} dev${normal}\n"
    printf "${blue}**${yellow} 3)${blue} dev2${normal}\n"
    printf "${blue}**${yellow} 4)${blue} staging${normal}\n"
    printf "************************************\n"
    printf "Choose an env or ${fgred}X to exit. ${normal}"
  else
    arg_opt=$1
  fi

  read opt
  while [[ !arg_opt && $opt != '' ]]
    do
    if [ $opt = '' ]; then
      break;
    else
      case $opt in
        1|"demo" )
          git push demo ${branch}:master -f
          break;
        ;;
        2|"dev" )
          git push dev ${branch}:master -f
          break;
        ;;
        3|"dev2" )
          git push dev2 ${branch}:master -f
          break;
        ;;
        4|"staging" )
          git push staging ${branch}:master -f
          break;
        ;;
        [Yy])
          git push $arg_opt ${branch}:master -f
          break;
        ;;
        [Nnx])break;
        ;;
        \n)break;
        ;;
      esac
    fi
  done
}

vimbundle() {
  cd ~/.vim/bundle

  for dir in *
  do
    cd $dir
    branch="$(git symbolic-ref --short --quiet HEAD)"
    echo $dir
    if [ "$branch" != "master" ]
    then
      git checkout master
    fi
    git pull
    cd -
  done
  cd ~
  echo "Vim plugins have been updated."
}

alias git="hub"

alias pr="hub pull-request"

eval "$(hub alias -s)"


